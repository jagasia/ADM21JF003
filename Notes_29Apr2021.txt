	public List getOrderWithAmount()
	{
		Session session = getSession();
		String sql="select o.id, o.orderDate, o.quantity, p.price, p.price*o.quantity from Order o join Product p on o.product.id=p.id";
		Query query = session.createQuery(sql);
		return query.list();
	}

//Now the task given is to display
	Customer ID and the number of orders they have placed


	public List findCustomerWiseOrderCount()
	{
		Session session = getSession();
		String sql="select o.customer.id, count(o.id) from Order o group by o.customer.id";
		Query query = session.createQuery(sql);
		return query.list();
	}

//Display all the customer ids even if they have not placed any orders
	public List findCustomerWiseOrderCount()
	{
		Session session = getSession();
//		String sql="select o.customer.id, count(o.id) from Order o group by o.customer.id";
		String sql="select c.id, count(o.id) from Customer c left outer join Order o on c.id=o.customer.id group by c.id";
		Query query = session.createQuery(sql);
		return query.list();
	}


//Display the customer wise order value
	customer id, number of orders, total order value	(product price * order quantity)


Criteria API
	all those things we did in query can be done using criteria api
	

	public List<Order> findOrdersByCustomerId1(Long customerId)
	{
		Session session=getSession();
		Criteria criteria = session.createCriteria(Order.class);
		criteria.add(Restrictions.eq("customer.id", customerId));
		List<Order> result = criteria.list();
		return result;
	}




class Customer
{

	List<Order> 
}



Difference Between Hibernate Save And Persist Methods
Difference Between Merge And Update Methods In Hibernate

https://www.java4s.com/hibernate/hibernate-one-to-one-mapping-using-annotations/

https://www.java4s.com/hibernate/hibernate-many-to-one-annotation-example/
https://www.java4s.com/hibernate/hibernate-many-to-many-mapping-using-annotations/
https://dzone.com/tutorials/java/hibernate/hibernate-example/hibernate-mapping-many-to-many-using-annotations-1.html


Employee
	employeeId
	fullName
	
@ManyToOne(cascade = CascadeType.ALL)
	@JoinColumn(name="deptId",referencedColumnName="departmentId")
	Department department

Department
@Id
	@Column(name = "departmentId")
	private int departmentId;

----------------------------------------------------
Customer

@ManyToOne(cascade = CascadeType.ALL)
	@JoinColumn(name="venid",referencedColumnName="vid")

Vendor
@Id
	@Column(name = "vid")
	private int vendorId;

Categories.java
@ManyToMany(targetEntity=Item.class,cascade=CascadeType.ALL)
@JoinTable(name="categories_items",joinColumns=@JoinColumn(name="cat_id_fk",referencedColumnName="catid"),inverseJoinColumns=@JoinColumn(name="item_id_fk",referencedColumnName="itemid"))
private Set items;


Item.java (items table)
@ManyToMany(targetEntity=Categories.class,mappedBy="items")
private Set  categories;







query
Named query		a query will be defined with a name in the entity class itself	
native query


@Entity
@Table(name = "OrderDetails")
@NamedQuery(name = "findByCustomerid",query = "select o from Order o where o.customer.id=:cid")
public class Order {



------------

	public List<Order> namedQueryDemo(Long cid)
	{
		Session session = getSession();
		Query query = session.getNamedQuery("findByCustomerid");
		query.setParameter("cid", cid);
		List result = query.list();
		session.close();
		return result;
	}


