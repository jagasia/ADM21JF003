Spring cloud
	Cloud is a central storage, platform
		PAAS
		IAAS
		SAAS

	cloud is not only a place where we store information.
	it also provides runtime env for running application
	it provides env to develop apps 

	what exactly we are going to do in Spring cloud?
		we can do 
			1) Eureka server and client
			2) Feign client
			3) Ribbon

	one of the benefits of Spring cloud is to analyze the load balancing

		that is what we are going to montior using Eureka server and client

	why we choose cloud while we have developed spring boot rest application?
		sometimes, take example, any service amazon or payment gateway or location service
		any service		Rest api
		
		sometimes, there will be less payload. sometimes in peak hours, there will huge payload

		so the scalability of the application is fine when our infra is capable of serving during peak hours


		but in weekdays, even there is no client access, our huge infra is up.

		scalability is not only able to scale to the increasing demands. 
			it is the ability to scale to decreasing demands by de provisioning the unnecessary resources

		Elasticity
			how does it differ from scalability?
			scalability is the ability to scale to increasing or decreasing demands using same infra
			if the infra can be provisioned or deprovisioned as required, then it is elastic

				
	i am creating 2 projects now running simultaneously in 2 eclipse windows
		1) eureka server
		2) eureka client

	i) server app is running in a specific port
		a) add the dependency (eureka server) while creating project in spring initializer
		b) server.port = 8761			(it is our choice. but commonly used port for eureka server)
		c) annotation
			@EnableEurekaServer		add this under @Configuration (@SpringBootApplication)
		d) in application.properties file, add the following:
			eureka.client.registerWithEureka = false
			eureka.client.fetchRegistry = false
			server.port = 8761



here in eureka,
	server
		is used to monitor load
	client
		is the rest api


Let us create a client app:		in a new eclipse workspace running parallely 
	here we are creating a rest api

	1) create a spring boot app using spring initializer
		add dependencies
			spring web
			eureka	client
	2) in application.properties
		
		server.port=8383
		spring.application.name=account-service
		eureka.instance.hostname=localhost
		eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
		server.context-path=/account

	3) create a rest controller with getmapping methods
		/
			hello world

	4) run the spring boot app

	5) check the browser for localhost:8383/<<if any url>>

	6) Now check localhost:8761

		are you able to see your client app in this console?


======================================================================================
How can we access a rest api from our rest controller?
	what is rest api?
		a restful web service that provides service in the form of URL
		USING http methods
			GET
			POST
			PUT
			DELETE
			PATCH

	in our spring mvc project,
		<form method="GET"
		<form method="POST"

			both are fine. but what about PUT, DELETE, PATCH?????
			
	what can we do?
		we can use Feign client and access these api methods using an interface
		and that interface can be autowired in our REST controller

		REST controller provides access using GET / POST

	Lets us access a fake rest api (fake means somebody else have created rest api for learning purpose)

how can we access this rest api from our spring controller
	so our application is going to become a Feign client now


1) create a spring boot application
	while creating itself add dependencies
		i) spring web
		ii) feign

<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-openfeign</artifactId>
    <version>2.0.1.RELEASE</version>
</dependency>


2) go to the application class (which has main method)
		there is an annotation		@SpringBootApplication		this is configuration 
		add annotation
			@EnableFeignClients

3) create an interface
package com.example.demo;

import java.util.List;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@FeignClient(value = "instantwebtools-api", url = "https://api.instantwebtools.net/v1/")
public interface ApiClient {
	@GetMapping("/airlines")
	List<Airline> getAllAirlines();
	
	@GetMapping("/airlines/{id}")
	Airline findAirlineById(@PathVariable("id") long id);
}

4) autowire this interface in the rest controller
package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
public class AirlineController {

	@Autowired
	private ApiClient apiClient;
	
	@GetMapping("/airlines")
	    public ResponseEntity readAirlineData (@RequestParam(required = false) Long airlineId) {
	        if (airlineId == null) {
	            return ResponseEntity.ok(apiClient.getAllAirlines());
	        }
	        return ResponseEntity.ok(apiClient.findAirlineById(airlineId));
	    }	
	
}





https://javatodev.com/how-to-use-feign-client-in-spring-boot/
